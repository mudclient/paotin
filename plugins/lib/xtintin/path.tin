#nop vim: set filetype=tt:;

/*
本文件属于 PaoTin++ 的一部分。
PaoTin++ © 2020~2023 的所有版权均由担子炮(dzp <danzipao@gmail.com>) 享有并保留一切法律权利
你可以在遵照 GPLv3 协议的基础之上使用、修改及重新分发本程序。
*/

#nop 本文件是 xtintin 的一部分，实现了一些方向和路径运算函数;

///=== {
///// 方向和路径运算函数：
//
// #@ dir.Name <方向全拼|方向缩写> [<严格模式>]
//    给出指定方向的中文名称。方向可以通过英文单词或者英文单词的缩写给出。
//
// #@ dir.Short <方向全拼> [<严格模式>]
//    给出方向对应的英文单词缩写。
//
// #@ dir.Long <方向缩写> [<严格模式>]
//    给出方向对应的英文单词全拼。
//
// #@ dir.Reverse <方向> [<严格模式>]
//    给出方向对应的相反方向。
//
///// 以上函数中，凡是支持严格模式参数的，如果严格模式为 true，则给错误方向给出空字符串结果。
// };
#func {dir.Name}    { #return @__dir_convert_dir__{name; %1; %2}; };
#func {dir.Short}   { #return @__dir_convert_dir__{short; %1; %2}; };
#func {dir.Long}    { #return @__dir_convert_dir__{long; %1; %2}; };

#func {dir.Reverse}  {
    #if { "%1" == "enter{| .*}" } {
        #return {out};
    };
    #else {
        #return @__dir_convert_dir__{reverse; %1; %2};
    };
};

///=== {
// #@ dir.IsDir <方向全拼|方向缩写>
//    检查参数是否是一个合格的方向指令。
// };
#func {dir.IsDir} {
    #local cmd {%0};
    #if { "@dir.Name{$cmd}" == "" } {
        #return 0;
    };
    #else {
        #return 1;
    };
};

///=== {
// #@ path.Reverse <路径>
//    给出路径对应的反向路径。
// };
#func {path.Reverse} {
    #local path     {%0};
    #local newPath  {};

    #local step {};
    #foreach {$path} {step} {
        #list newPath insert {1} {@dir.Reverse{$step}};
    };

    #return {@slist.FromList{$newPath}};
};

#var xtt.dir.table {
    {east}      {{name}{正东}   {short}{e}  {long}{east}        {reverse}{west}     }
    {west}      {{name}{正西}   {short}{w}  {long}{west}        {reverse}{east}     }
    {south}     {{name}{正南}   {short}{s}  {long}{south}       {reverse}{north}    }
    {north}     {{name}{正北}   {short}{n}  {long}{north}       {reverse}{south}    }

    {e}         {{name}{正东}   {short}{e}  {long}{east}        {reverse}{w}        }
    {w}         {{name}{正西}   {short}{w}  {long}{west}        {reverse}{e}        }
    {s}         {{name}{正南}   {short}{s}  {long}{south}       {reverse}{n}        }
    {n}         {{name}{正北}   {short}{n}  {long}{north}       {reverse}{s}        }

    {northeast} {{name}{东北}   {short}{ne} {long}{northeast}   {reverse}{southwest}}
    {southeast} {{name}{东南}   {short}{se} {long}{southeast}   {reverse}{northwest}}
    {northwest} {{name}{西北}   {short}{nw} {long}{northwest}   {reverse}{southeast}}
    {southwest} {{name}{西南}   {short}{sw} {long}{southwest}   {reverse}{northeast}}

    {ne}        {{name}{东北}   {short}{ne} {long}{northeast}   {reverse}{sw}       }
    {se}        {{name}{东南}   {short}{se} {long}{southeast}   {reverse}{nw}       }
    {nw}        {{name}{西北}   {short}{nw} {long}{northwest}   {reverse}{se}       }
    {sw}        {{name}{西南}   {short}{sw} {long}{southwest}   {reverse}{ne}       }

    {up}        {{name}{正上}   {short}{u}  {long}{up}          {reverse}{down}     }
    {down}      {{name}{正下}   {short}{d}  {long}{down}        {reverse}{up}       }
    {u}         {{name}{正上}   {short}{u}  {long}{up}          {reverse}{d}        }
    {d}         {{name}{正下}   {short}{d}  {long}{down}        {reverse}{u}        }

    {eastup}    {{name}{东上}   {short}{eu} {long}{eastup}      {reverse}{westdown} }
    {westup}    {{name}{西上}   {short}{wu} {long}{westup}      {reverse}{eastdown} }
    {southup}   {{name}{南上}   {short}{su} {long}{southup}     {reverse}{northdown}}
    {northup}   {{name}{北上}   {short}{nu} {long}{northup}     {reverse}{southdown}}

    {eu}        {{name}{东上}   {short}{eu} {long}{eastup}      {reverse}{wd}       }
    {wu}        {{name}{西上}   {short}{wu} {long}{westup}      {reverse}{ed}       }
    {su}        {{name}{南上}   {short}{su} {long}{southup}     {reverse}{nd}       }
    {nu}        {{name}{北上}   {short}{nu} {long}{northup}     {reverse}{sd}       }

    {eastdown}  {{name}{东下}   {short}{ed} {long}{eastdown}    {reverse}{westup}   }
    {westdown}  {{name}{西下}   {short}{wd} {long}{westdown}    {reverse}{eastup}   }
    {southdown} {{name}{南下}   {short}{sd} {long}{southdown}   {reverse}{northup}  }
    {northdown} {{name}{北下}   {short}{nd} {long}{northdown}   {reverse}{southup}  }

    {ed}        {{name}{东下}   {short}{ed} {long}{eastdown}    {reverse}{wu}       }
    {wd}        {{name}{西下}   {short}{wd} {long}{westdown}    {reverse}{eu}       }
    {sd}        {{name}{南下}   {short}{sd} {long}{southdown}   {reverse}{nu}       }
    {nd}        {{name}{北下}   {short}{nd} {long}{northdown}   {reverse}{su}       }

    {out}       {{name}{出去}   {short}{out}    {long}{out}     {reverse}{enter}    }
    {enter}     {{name}{进去}   {short}{enter}  {long}{enter}   {reverse}{out}      }
};

#func {__dir_convert_dir__} {
    #local field        {%1};
    #local dir          {%2};
    #local restricted   {%2};

    #if { "$dir" == "" } {
        #return {};
    };

    #local entry ${xtt.dir.table[$dir]};

    #if { "$entry" == "" } {
        #if { @isTrue{$restricted} } {
            #return {};
        };
        #else {
            #return {$dir};
        };
    };
    #else {
        #return {$entry[$field]};
    };
};

///=== {
// #@ path.Compact <路径>
//    压缩路径。返回压缩后的新路径。
// };
#func {path.Compact} {
    #local path {@list.FromSlist{%0}};
    #local count {&path[]};
    #if { $count == 0 } {
        #return {};
    };

    #local idx {1};
    #while { $idx < $count } {
        #local current {$path[$idx]};
        #local next {$path[@math.Eval{$idx + 1}]};
        #if { "@dir.Long{$current}" !== "@dir.Reverse{@dir.Long{$next}}" } {
            #math idx {$idx + 1};
            #continue;
        };

        #list path delete $idx 2;
        #local idx      {@math.Max{1;@math.Eval{$idx - 2}}};
        #local count    {@math.Eval{$count - 2}};
    };

    #return {@slist.FromList{$path}};
};

///=== {
// #@ path.Long <路径>
//    返回长版本的路径。路径中的每个方向命令都会被扩展成完整的单词。
// };
#func {path.Long} {
    #return {@fp.Transform{{%0};{\@dir.Long{VALUE}}}};
};

///=== {
// #@ path.Short <路径>
//    返回长版本的路径。路径中的每个方向命令都会被简化。
// };
#func {path.Short} {
    #return {@fp.Transform{{%0};{\@dir.Short{VALUE}}}};
};
