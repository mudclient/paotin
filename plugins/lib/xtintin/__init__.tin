#nop vim: set filetype=tt:;

/*
本文件属于 PaoTin++ 的一部分。
PaoTin++ © 2020~2023 的所有版权均由担子炮(dzp <danzipao@gmail.com>) 享有并保留一切法律权利
你可以在遵照 GPLv3 协议的基础之上使用、修改及重新分发本程序。
*/

#nop xtintin 是为了方便 TinTin++ 使用而增加的一些语法扩展。;

load-file plugins/lib/xtintin/doc.tin;
load-file plugins/lib/xtintin/number.tin;
load-file plugins/lib/xtintin/bool.tin;
load-file plugins/lib/xtintin/string.tin;
load-file plugins/lib/xtintin/algo.tin;
load-file plugins/lib/xtintin/list.tin;
load-file plugins/lib/xtintin/slist.tin;
load-file plugins/lib/xtintin/set.tin;
load-file plugins/lib/xtintin/time.tin;
load-file plugins/lib/xtintin/path.tin;
load-file plugins/lib/xtintin/debug.tin;
load-file plugins/lib/xtintin/fp.tin;
load-file plugins/lib/xtintin/default.tin;
load-file plugins/lib/xtintin/cmds.tin;
load-file plugins/lib/xtintin/mslp.tin;

///=== {
///// 以上文档采用 PaoTin++ 的文档化注释工具生成。
///// 下面是关于文档化注释工具的简单介绍。
/////
// ## xtt.Doc
//    解析文档化注释，生成文档。
//
//    文档化注释是 PaoTin++ 非常有特色的创举，是对 tt++ 能力的一大增强，可以实现
//    以下八合一效果：
//        - 代码注释: 文档化注释既是文档，也是注释。它和被说明的源代码紧密结合
//                    在一起，既方便查看，也方便维护，可以有效避免文档过时的问题。
//        - 联机帮助: 文档化注释可以在 PaoTin++ 运行时，即使是在游戏界面，也可以
//                    随时查看，支持模糊查询。也和 PaoTin++ 其它部分做紧密结合。
//        - 错误提示: 文档化注释可以给别名当成是参数输入错误时提示用户正确用法的
//                    作用。具体参见 <139>HELP xtt.Usage<299>。
//        - Markdown: 文档化注释用类似于 Markdown 的标记语言书写，可以轻松输出为
//                    Markdown 文档。
//        - HTML文档: 借助于 TinTin++ 的 HTML 输出功能，文档化注释也可以输出成彩
//                    色 HTML 页面。
//        - GH-Pages: 生成的 HTML 页面可以部署在 GitHub Pages 上，作为项目的文档
//                    页面使用。
//        - 示例代码: 文档化注释里可以写示例代码，帮助用户更好地理解文档。示例
//                    代码有别于普通的文本，它会被识别并高亮显示给用户。
//        - 单元测试: 符合规范的示例代码本身也可以作为单元测试来使用，方便在长期
//                    维护过程中，保持代码的健壮性和可靠性。
//
//    先给大家看一个直观的例子。
//    用户只需要按照下面这个格式，就可以为模块和函数（或别名）书写文档。
//    <119>注意：<299>在下面的模版中，「格式非常重要」，一定要按照格式书写，才会
//    被正确识别。
//
//    ///=== {
//    \/\/\/\/\/ 模块名称，和模块简要说明
//    \/\/\/\/\/
//    \/\/\/\/\/ 模块的整体说明性的文档，建议放在文件的一开头。
//    \/\/\/\/\/
//    \/\/\/\/\/ 五个斜线（<169>\/\/\/\/\/<299>）开头的文本将会被识别为模块文档。
//    \/\/\/\/\/ 模块文档仅在 HELP <模块名> 时出现，如果只查看函数或者别名，
//    \/\/\/\/\/ 是不会显示的。
//    \/\/\/\/\/
//    \/\/\/\/\/ 这里继续写模块文档。
//    \/\/\/\/\/
//    \/\/\/\/\/ 下面开始写别名和函数的文档：
//    \/\/\/\/\/ 两个斜线（<169>\/\/<299>）开头的文本会被识别为别名和函数的文档。
//    \/\/\/\/\/
//    \/\/\/\/\/ 建议放在被说明的别名或者函数的紧挨着的前面。
//    \/\/\/\/\/
//    \/\/\/\/\/ 实际运用中，文档和代码一般都是穿插书写，最终所有文档会按照书写
//    \/\/\/\/\/ 时的顺序提取成一篇完整的文档，因此书写顺序非常重要。请自行体会。
//    \/\/
//    \/\/ <169>\#\#<299> foo.Bar <参数1> <参数2>
//    \/\/    函数（或别名）的一句话介绍。
//    \/\/    函数（或别名）的更多介绍。
//    \/\/    函数（或别名）的参数说明：
//    \/\/        - 参数1: 参数说明
//    \/\/        - 参数2: 参数说明
//    \/\/ };
//    #alias {foo.Bar} {
//       ....;
//    };
//
//    上面的例子中，如果是为别名写文档，则应该用 <169>\#\#<299> 开头，如果为函数写文档，
//    则应当以 <169>\#\@<299> 开头。
//
//    参数格式说明：
//        - 必选参数: 用 <参数名> 表示
//        - 可选参数: 用 [<参数名>] 表示
//        - 重复参数: 用 ... 或 [...] 表示
//
//    参数名一般用具有实际意义的中文名称来表示，或者用参数类型表示。
//    有关参数类型的更多内容请查看 <139>HELP DataType<299>。
//
// ## xtt.Usage <关键字> [<错误提示>]
//    给出关键字对应的帮助信息，以提示用户了解如何正确使用该别名（或函数）。
// };
